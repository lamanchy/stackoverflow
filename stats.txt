C:\Users\Lamanchy\PycharmProjects\stackoverflow\venv\Scripts\python.exe C:/Users/Lamanchy/PycharmProjects/stackoverflow/test_domains.py
stats with 3 cards

['green']
0% 7% 14% 21% 28% 35% 42% 50% 57% 64% 71% 78% 85% 92%
green-int           :  81.25%(abs count =  41132 out of  50624)
yellow-int+         :  13.91%(abs count =   7040 out of  50624)
white-int+          :   2.53%(abs count =   1279 out of  50624)
red-int+            :   2.32%(abs count =   1173 out of  50624)
fn: 19
                  19:  100.00%(abs count =   3127 out of   3127)

fn: 13
                  13:  100.00%(abs count =   3113 out of   3113)

fn: 7
                   7:  100.00%(abs count =   3113 out of   3113)

fn: 15
                  15:  100.00%(abs count =   3113 out of   3113)

fn: min(x, 11)
                  11:  58.08%(abs count =   1808 out of   3113)
                   7:   8.64%(abs count =    269 out of   3113)
                   1:   6.14%(abs count =    191 out of   3113)
                   3:   4.37%(abs count =    136 out of   3113)
                   6:   4.37%(abs count =    136 out of   3113)

fn: if_prime
                  17:  45.45%(abs count =   1417 out of   3118)
                  15:   8.60%(abs count =    268 out of   3118)
                   1:   6.32%(abs count =    197 out of   3118)
                   6:   4.20%(abs count =    131 out of   3118)
                   9:   4.14%(abs count =    129 out of   3118)

fn: gcd(x, 24)
                   1:  44.27%(abs count =   1378 out of   3113)
                   3:  18.15%(abs count =    565 out of   3113)
                   6:  10.76%(abs count =    335 out of   3113)
                   2:  10.63%(abs count =    331 out of   3113)
                   4:   5.94%(abs count =    185 out of   3113)

fn: max(x, 9)
                   9:  41.01%(abs count =   1277 out of   3114)
                  15:   8.64%(abs count =    269 out of   3114)
                  13:   8.03%(abs count =    250 out of   3114)
                  19:   7.77%(abs count =    242 out of   3114)
                  11:   4.59%(abs count =    143 out of   3114)

fn: (x % 5) + 1
                   3:  22.49%(abs count =    700 out of   3113)
                   5:  20.33%(abs count =    633 out of   3113)
                   2:  19.69%(abs count =    613 out of   3113)
                   4:  19.18%(abs count =    597 out of   3113)
                   1:  18.31%(abs count =    570 out of   3113)

fn: ceil(x / 3)
                   5:  19.63%(abs count =    611 out of   3113)
                   3:  14.29%(abs count =    445 out of   3113)
                   1:  12.40%(abs count =    386 out of   3113)
                   7:  10.63%(abs count =    331 out of   3113)
                   4:   9.70%(abs count =    302 out of   3113)

fn: lcm(x, 6)
                   6:  15.24%(abs count =    589 out of   3865)
                 114:  13.38%(abs count =    517 out of   3865)
                 102:  13.32%(abs count =    515 out of   3865)
                  30:  12.39%(abs count =    479 out of   3865)
                  42:   9.78%(abs count =    378 out of   3865)

fn: x + 11
                  18:   9.17%(abs count =    286 out of   3118)
                  26:   8.66%(abs count =    270 out of   3118)
                  24:   8.08%(abs count =    252 out of   3118)
                  30:   8.02%(abs count =    250 out of   3118)
                  12:   6.86%(abs count =    214 out of   3118)

fn: 2 * x
                  14:   9.06%(abs count =    285 out of   3145)
                  30:   9.06%(abs count =    285 out of   3145)
                  26:   8.46%(abs count =    266 out of   3145)
                  38:   8.24%(abs count =    259 out of   3145)
                   2:   6.90%(abs count =    217 out of   3145)

fn: x + 5
                  20:   8.89%(abs count =    277 out of   3117)
                  12:   8.66%(abs count =    270 out of   3117)
                  18:   8.31%(abs count =    259 out of   3117)
                  24:   8.12%(abs count =    253 out of   3117)
                   6:   6.83%(abs count =    213 out of   3117)

fn: x - 1
                   6:   8.86%(abs count =    276 out of   3115)
                  14:   8.86%(abs count =    276 out of   3115)
                  12:   8.35%(abs count =    260 out of   3115)
                  18:   8.15%(abs count =    254 out of   3115)
                   0:   6.26%(abs count =    195 out of   3115)

fn: x
                   7:   8.61%(abs count =    268 out of   3114)
                  15:   8.61%(abs count =    268 out of   3114)
                  13:   7.96%(abs count =    248 out of   3114)
                  19:   7.74%(abs count =    241 out of   3114)
                   1:   6.26%(abs count =    195 out of   3114)

fns which produced certain result:
color: green-int     ['13', '19', 'x', 'x + 5', 'x + 11', 'x - 1', '2 * x', 'min(x, 11)', 'ceil(x / 3)', 'max(x, 9)', 'gcd(x, 24)', 'if_prime', '(x % 5) + 1', '7', 'lcm(x, 6)', '15']
color: yellow-int+   ['lcm(x, 6)', 'x + 11', '2 * x', 'x + 5', 'x', 'x - 1', 'max(x, 9)', 'if_prime', 'gcd(x, 24)', 'ceil(x / 3)', 'min(x, 11)']
color: red-int+      ['lcm(x, 6)', '2 * x', 'x + 11', 'x', 'x + 5', 'x - 1', 'max(x, 9)', 'if_prime']
color: white-int+    ['lcm(x, 6)', '2 * x', 'x + 5', 'x + 11']

most common values globally:
value: 7             8.258928571428571
value: 15            8.201643489254108
value: 13            7.646570796460177
value: 19            7.464838811630847
value: 1             6.009007585335019
value: 11            4.651943742098609
value: 6             4.391197850821745
value: 3             4.167983565107459
value: 17            3.8914348925410875
value: 9             3.7630372945638433
value: 2             3.520069532237674
value: 4             3.2612989886219976
value: 5             3.1309260429835652
value: 12            3.012405183312263
value: 18            2.6825221238938055
value: 30            2.4375790139064475
value: 14            2.0326327433628317
value: 24            1.9595448798988624
value: 8             1.6138590391908976
value: 26            1.3471871049304678
value: 10            1.2266908975979773
value: 20            1.2010113780025284
value: 16            1.1219974715549939
value: 22            1.1140960809102403
value: 114           1.0212547408343868
value: 102           1.0173040455120101
value: 42            0.952117572692794
value: 78            0.7071744627054362
value: 38            0.6242098609355247
value: 0             0.5985303413400759
value: 28            0.4879108723135272
value: 66            0.4780341340075853
value: 23            0.46025600505689
value: 34            0.385192793931732
value: 21            0.3812420986093552
value: 29            0.3753160556257901
value: 25            0.28445006321112515
value: 35            0.26667193426042984
value: 48            0.2646965865992415
value: 27            0.2646965865992415
['green', 'yellow']
0% 3% 6% 9% 12% 15% 18% 21% 25% 28% 31% 34% 37% 40% 43% 46% 50% 53% 56% 59% 62% 65% 68% 71% 75% 78% 81% 84% 87% 90% 93% 96%
green-int           :  48.01%(abs count = 472964 out of 985088)
yellow-int+         :  20.36%(abs count = 200555 out of 985088)
yellow-int-         :  18.80%(abs count = 185165 out of 985088)
white-int-          :   4.21%(abs count =  41515 out of 985088)
red-int-            :   3.09%(abs count =  30460 out of 985088)
red-int+            :   2.99%(abs count =  29495 out of 985088)
white-int+          :   2.19%(abs count =  21613 out of 985088)
zd                  :   0.34%(abs count =   3321 out of 985088)
fn: 19
                  19:  100.00%(abs count =  29400 out of  29400)

fn: 13
                  13:  100.00%(abs count =  29368 out of  29368)

fn: 7
                   7:  100.00%(abs count =  29368 out of  29368)

fn: 15
                  15:  100.00%(abs count =  29368 out of  29368)

fn: max(x, 9)
                   9:  54.70%(abs count =  16074 out of  29385)
                  15:   4.38%(abs count =   1288 out of  29385)
                  13:   4.13%(abs count =   1213 out of  29385)
                  19:   3.83%(abs count =   1126 out of  29385)
                  11:   2.48%(abs count =    729 out of  29385)

fn: sin(pi * x / 2) - 2
                  -2:  46.27%(abs count =  13602 out of  29394)
                  -3:  28.02%(abs count =   8237 out of  29394)
                  -1:  25.70%(abs count =   7555 out of  29394)

fn: min(x, 11)
                  11:  44.17%(abs count =  12973 out of  29372)
                  -2:   4.61%(abs count =   1354 out of  29372)
                   7:   4.55%(abs count =   1337 out of  29372)
                   1:   4.54%(abs count =   1333 out of  29372)
                   0:   3.99%(abs count =   1172 out of  29372)

fn: split_by_int
                  -3:  40.48%(abs count =  11894 out of  29383)
                  -2:  30.07%(abs count =   8836 out of  29383)
                  -1:  29.45%(abs count =   8653 out of  29383)

fn: if_greater_or_less
                  33:  36.57%(abs count =  10756 out of  29410)
                  42:  35.98%(abs count =  10582 out of  29410)
                  28:  27.45%(abs count =   8072 out of  29410)

fn: gcd(x, 24)
                   1:  34.17%(abs count =  10036 out of  29368)
                   3:  19.40%(abs count =   5698 out of  29368)
                   2:  15.07%(abs count =   4427 out of  29368)
                   6:   8.83%(abs count =   2593 out of  29368)
                   4:   8.40%(abs count =   2466 out of  29368)

fn: if_prime
                  17:  27.11%(abs count =   7967 out of  29393)
                   1:   4.61%(abs count =   1356 out of  29393)
                  -2:   4.54%(abs count =   1333 out of  29393)
                  15:   4.37%(abs count =   1285 out of  29393)
                  -3:   4.07%(abs count =   1196 out of  29393)

fn: lcm(x, 6)
                   6:  20.27%(abs count =   7902 out of  38983)
                  30:   8.61%(abs count =   3356 out of  38983)
                 150:   7.46%(abs count =   2909 out of  38983)
                  42:   7.21%(abs count =   2810 out of  38983)
                 114:   6.82%(abs count =   2657 out of  38983)

fn: while_cycle
                   0:  23.76%(abs count =   6982 out of  29387)
                   2:  14.95%(abs count =   4392 out of  29387)
                   4:  11.75%(abs count =   3454 out of  29387)
                   6:   8.06%(abs count =   2368 out of  29387)
                  -2:   7.06%(abs count =   2076 out of  29387)

fn: (x % 5) + 1
                   4:  21.90%(abs count =   6432 out of  29368)
                   3:  21.32%(abs count =   6261 out of  29368)
                   5:  20.11%(abs count =   5905 out of  29368)
                   1:  19.59%(abs count =   5753 out of  29368)
                   2:  17.08%(abs count =   5017 out of  29368)

fn: ceil(x / 4) ** 2
                   1:  16.13%(abs count =   5420 out of  33598)
                   0:  14.06%(abs count =   4724 out of  33598)
                   4:  12.60%(abs count =   4233 out of  33598)
                  16:  10.19%(abs count =   3425 out of  33598)
                   9:   9.01%(abs count =   3027 out of  33598)

fn: 50 // x
                   1:  12.40%(abs count =   4461 out of  35985)
                 -25:  10.37%(abs count =   3732 out of  35985)
                   2:   9.57%(abs count =   3443 out of  35985)
zd                  :   9.23%(abs count =   3321 out of  35985)
                   3:   9.10%(abs count =   3273 out of  35985)

fn: x // -4
                   0:  14.70%(abs count =   4343 out of  29542)
                  -1:  14.12%(abs count =   4172 out of  29542)
                  -4:  11.17%(abs count =   3301 out of  29542)
                  -2:  10.85%(abs count =   3206 out of  29542)
                  -3:   8.98%(abs count =   2652 out of  29542)

fn: last_negative
                  -3:  14.26%(abs count =   4190 out of  29384)
                  -2:  13.75%(abs count =   4041 out of  29384)
                  -1:  12.71%(abs count =   3735 out of  29384)
                   0:   9.71%(abs count =   2852 out of  29384)
                  -5:   9.33%(abs count =   2741 out of  29384)

fn: ceil(x / 3)
                   0:  11.61%(abs count =   3409 out of  29375)
                   1:  10.37%(abs count =   3045 out of  29375)
                   5:   9.66%(abs count =   2837 out of  29375)
                   3:   8.89%(abs count =   2610 out of  29375)
                  -1:   7.06%(abs count =   2074 out of  29375)

fn: 10 - x
                 -32:   5.51%(abs count =   2135 out of  38727)
                 -23:   4.91%(abs count =   1902 out of  38727)
                 -30:   3.68%(abs count =   1426 out of  38727)
                   9:   3.59%(abs count =   1389 out of  38727)
                 -40:   3.53%(abs count =   1368 out of  38727)

fn: -2 * x + 40
                 -44:   5.41%(abs count =   2078 out of  38394)
                 -26:   4.97%(abs count =   1909 out of  38394)
                  38:   3.69%(abs count =   1417 out of  38394)
                  26:   3.60%(abs count =   1383 out of  38394)
                  44:   3.56%(abs count =   1368 out of  38394)

fn: if_equal_or_not
                   3:   5.74%(abs count =   1730 out of  30142)
                  -9:   4.54%(abs count =   1369 out of  30142)
                 -12:   4.51%(abs count =   1358 out of  30142)
                  -3:   4.50%(abs count =   1356 out of  30142)
                   5:   4.36%(abs count =   1314 out of  30142)

fn: x % 25
                  15:   5.80%(abs count =   1705 out of  29374)
                   1:   5.44%(abs count =   1598 out of  29374)
                  19:   5.43%(abs count =   1596 out of  29374)
                  23:   5.38%(abs count =   1581 out of  29374)
                  13:   5.37%(abs count =   1578 out of  29374)

fn: x - 12
                 -22:   5.01%(abs count =   1586 out of  31626)
                 -11:   4.34%(abs count =   1373 out of  31626)
                 -14:   4.29%(abs count =   1358 out of  31626)
                  -5:   4.24%(abs count =   1342 out of  31626)
                   3:   4.19%(abs count =   1324 out of  31626)

fn: 2 * x
                   2:   4.57%(abs count =   1411 out of  30890)
                  14:   4.46%(abs count =   1377 out of  30890)
                  -4:   4.33%(abs count =   1336 out of  30890)
                  30:   4.31%(abs count =   1330 out of  30890)
                  26:   4.06%(abs count =   1253 out of  30890)

fn: 40 - x
                  39:   4.68%(abs count =   1399 out of  29910)
                  42:   4.57%(abs count =   1367 out of  29910)
                  33:   4.54%(abs count =   1358 out of  29910)
                  25:   4.39%(abs count =   1312 out of  29910)
                  27:   4.15%(abs count =   1241 out of  29910)

fn: for_cycle
                  11:   4.73%(abs count =   1395 out of  29495)
                  28:   4.70%(abs count =   1387 out of  29495)
                  27:   4.66%(abs count =   1373 out of  29495)
                  15:   4.36%(abs count =   1287 out of  29495)
                  43:   4.22%(abs count =   1245 out of  29495)

fn: x + 11
                   9:   4.72%(abs count =   1390 out of  29477)
                  12:   4.71%(abs count =   1387 out of  29477)
                  18:   4.59%(abs count =   1354 out of  29477)
                  26:   4.39%(abs count =   1294 out of  29477)
                   8:   4.14%(abs count =   1221 out of  29477)

fn: x + 5
                   3:   4.69%(abs count =   1383 out of  29459)
                   6:   4.66%(abs count =   1373 out of  29459)
                  12:   4.54%(abs count =   1336 out of  29459)
                  20:   4.43%(abs count =   1304 out of  29459)
                  18:   4.17%(abs count =   1228 out of  29459)

fn: x - 7
                  -6:   4.60%(abs count =   1373 out of  29857)
                  -9:   4.60%(abs count =   1372 out of  29857)
                   0:   4.56%(abs count =   1362 out of  29857)
                   8:   4.40%(abs count =   1315 out of  29857)
                   6:   4.13%(abs count =   1234 out of  29857)

fn: x - 1
                   0:   4.60%(abs count =   1359 out of  29517)
                  -3:   4.58%(abs count =   1352 out of  29517)
                   6:   4.57%(abs count =   1349 out of  29517)
                  14:   4.46%(abs count =   1315 out of  29517)
                  12:   4.19%(abs count =   1236 out of  29517)

fn: x
                   1:   4.60%(abs count =   1351 out of  29389)
                  -2:   4.54%(abs count =   1333 out of  29389)
                   7:   4.53%(abs count =   1332 out of  29389)
                  15:   4.37%(abs count =   1285 out of  29389)
                  13:   4.12%(abs count =   1210 out of  29389)

fns which produced certain result:
color: green-int     ['13', '19', 'x', 'x + 5', 'x + 11', 'x - 1', '2 * x', 'min(x, 11)', 'ceil(x / 3)', 'max(x, 9)', 'gcd(x, 24)', 'if_prime', '(x % 5) + 1', '10 - x', '50 // x', 'x % 25', 'ceil(x / 4) ** 2', 'while_cycle', '7', 'x - 7', 'x - 12', '-2 * x + 40', 'if_equal_or_not', 'for_cycle', '40 - x', 'lcm(x, 6)', 'x // -4', '15']
color: yellow-int+   ['lcm(x, 6)', 'x - 7', '40 - x', '-2 * x + 40', 'if_greater_or_less', 'for_cycle', 'x + 11', '2 * x', 'x + 5', 'ceil(x / 4) ** 2', 'last_negative', 'x', 'x - 1', 'max(x, 9)', 'if_prime', 'while_cycle', '50 // x', 'x % 25', '10 - x', 'if_equal_or_not', 'x // -4', 'x - 12', 'min(x, 11)', 'ceil(x / 3)', 'gcd(x, 24)']
color: yellow-int-   ['x - 12', 'x // -4', 'sin(pi * x / 2) - 2', 'split_by_int', 'last_negative', 'if_equal_or_not', '10 - x', 'x - 7', '-2 * x + 40', 'x', 'x - 1', '2 * x', 'min(x, 11)', 'ceil(x / 3)', 'if_prime', '50 // x', 'for_cycle', 'while_cycle', '40 - x', 'x + 5', 'x + 11']
color: red-int+      ['lcm(x, 6)', 'for_cycle', '2 * x', 'ceil(x / 4) ** 2', 'x + 11', '-2 * x + 40', 'x', 'x + 5', 'x - 1', 'max(x, 9)', 'if_prime', 'x - 7', 'x - 12', 'if_equal_or_not', 'while_cycle', '40 - x']
color: white-int+    ['lcm(x, 6)', 'ceil(x / 4) ** 2', '2 * x', 'for_cycle', 'x + 5', 'x + 11']
color: red-int-      ['10 - x', '-2 * x + 40', 'x - 12', 'x - 7', 'if_equal_or_not', '50 // x', 'x // -4', '2 * x', '40 - x', 'min(x, 11)', 'if_prime', 'x - 1', 'x + 5', 'for_cycle', 'while_cycle', 'x']
color: white-int-    ['10 - x', '-2 * x + 40', '50 // x', '40 - x', 'x - 12', '2 * x', 'if_equal_or_not', 'x - 1', 'x - 7', 'x // -4']
color: zd            ['50 // x']

most common values globally:
value: -2            4.246118113305614
value: 7             4.242463617463618
value: 1             4.152928469334719
value: 15            4.006139553014553
value: -3            3.8275768256237006
value: 13            3.8097104015072762
value: 0             3.697233140592516
value: 19            3.561610739345114
value: -1            3.4654771959459456
value: 2             3.107945686070686
value: 9             2.988565488565489
value: 3             2.939940391112266
value: 4             2.936590436590437
value: 6             2.6015949844074844
value: 11            2.2170608108108105
value: 42            1.932111648908524
value: 5             1.8250146179833682
value: 12            1.6375186785343037
value: 33            1.5842239475051973
value: -4            1.4736754482848233
value: 28            1.4462667294698546
value: 17            1.4412925545738045
value: 8             1.3830236486486487
value: -5            1.2613086343555093
value: 16            1.2071002793659045
value: 10            1.164261466995842
value: 18            1.11228641502079
value: -6            1.0784823284823286
value: -9            1.029857231029106
value: 14            1.015645302754678
value: 24            1.0139195686070686
value: 30            0.9817397024428274
value: -8            0.8757593230249481
value: -7            0.8245963812370062
value: 22            0.7538412811850312
value: -10           0.7139463682432432
value: 26            0.6829846673596673
value: 25            0.6653212707900208
value: 20            0.661666774948025
value: 38            0.5910131886694387
['green', 'yellow', 'red']
0% 2% 4% 6% 8% 10% 12% 14% 16% 18% 20% 22% 25% 27% 29% 31%
 0.01321268081665039 2 ['x', 'ints_from_list', 'for_cycle'] 16
33% 35% 37% 39% 41% 43% 45% 47% 50% 52% 54% 56% 58% 60% 62% 64% 66% 68% 70% 72% 75% 77% 79% 81% 83% 85% 87% 89% 91% 93% 95% 97%
green-int           :  34.82%(abs count = 1773128 out of 5091840)
yellow-int+         :  13.04%(abs count = 663934 out of 5091840)
yellow-int-         :  11.16%(abs count = 568307 out of 5091840)
red-float+          :   8.20%(abs count = 417613 out of 5091840)
white-float+        :   5.86%(abs count = 298370 out of 5091840)
white-inf           :   5.70%(abs count = 290042 out of 5091840)
white-int-          :   4.87%(abs count = 247959 out of 5091840)
white-int+          :   3.64%(abs count = 185558 out of 5091840)
red-float-          :   2.54%(abs count = 129505 out of 5091840)
red-int+            :   2.43%(abs count = 123678 out of 5091840)
white-float-        :   1.96%(abs count =  99749 out of 5091840)
te                  :   1.77%(abs count =  90119 out of 5091840)
red-int-            :   1.63%(abs count =  83150 out of 5091840)
re                  :   1.32%(abs count =  67119 out of 5091840)
ve                  :   0.66%(abs count =  33684 out of 5091840)
zd                  :   0.39%(abs count =  19925 out of 5091840)
fn: inf
                 inf:  100.00%(abs count = 290042 out of 290042)

fn: 19
                  19:  100.00%(abs count =  85502 out of  85502)

fn: 13
                  13:  100.00%(abs count =  85454 out of  85454)

fn: 15
                  15:  100.00%(abs count =  85454 out of  85454)

fn: 7
                   7:  100.00%(abs count =  85406 out of  85406)

fn: r_divide
re                  :  49.63%(abs count =  67119 out of 135245)
                  30:  16.94%(abs count =  22912 out of 135245)
                  20:  13.34%(abs count =  18039 out of 135245)
                  40:   9.53%(abs count =  12883 out of 135245)
                  10:   6.67%(abs count =   9015 out of 135245)

fn: max(x, 9)
                   9:  58.89%(abs count =  50334 out of  85477)
                  15:   3.08%(abs count =   2630 out of  85477)
                  13:   2.93%(abs count =   2506 out of  85477)
                  19:   2.81%(abs count =   2404 out of  85477)
                  11:   1.82%(abs count =   1556 out of  85477)

fn: ints_from_list
te                  :  38.14%(abs count =  45071 out of 118180)
                  17:   5.56%(abs count =   6567 out of 118180)
                  26:   5.12%(abs count =   6050 out of 118180)
                   1:   4.61%(abs count =   5454 out of 118180)
                   4:   4.46%(abs count =   5268 out of 118180)

fn: int_from_list
te                  :  38.15%(abs count =  45048 out of 118071)
                   9:   8.44%(abs count =   9967 out of 118071)
                   0:   6.85%(abs count =   8089 out of 118071)
                   2:   6.54%(abs count =   7720 out of 118071)
                   6:   6.40%(abs count =   7554 out of 118071)

fn: floor(log2(68 - x))
                   5:  39.13%(abs count =  39457 out of 100835)
                   6:  36.29%(abs count =  36588 out of 100835)
ve                  :  17.32%(abs count =  17464 out of 100835)
                   4:   5.36%(abs count =   5400 out of 100835)
                   3:   1.09%(abs count =   1097 out of 100835)

fn: split_by_int
                  -3:  45.70%(abs count =  39037 out of  85423)
                  -2:  27.54%(abs count =  23525 out of  85423)
                  -1:  26.76%(abs count =  22861 out of  85423)

fn: sin(pi * x / 2) - 2
                  -2:  31.55%(abs count =  35547 out of 112653)
                  -1:  16.90%(abs count =  19035 out of 112653)
                  -3:  16.42%(abs count =  18493 out of 112653)
            -1.29289:   8.76%(abs count =   9873 out of 112653)
            -2.15643:   7.41%(abs count =   8345 out of 112653)

fn: min(x, 11)
                  11:  39.23%(abs count =  33533 out of  85476)
                   0:   4.54%(abs count =   3880 out of  85476)
                   7:   3.84%(abs count =   3283 out of  85476)
                   1:   3.77%(abs count =   3224 out of  85476)
                   6:   3.66%(abs count =   3127 out of  85476)

fn: if_greater_or_less
                  33:  36.55%(abs count =  31264 out of  85528)
                  42:  36.42%(abs count =  31148 out of  85528)
                  28:  27.03%(abs count =  23116 out of  85528)

fn: ceil(sqrt(10 + x))
                   4:  24.71%(abs count =  24400 out of  98765)
                   5:  18.16%(abs count =  17940 out of  98765)
ve                  :  16.42%(abs count =  16220 out of  98765)
                   3:  11.09%(abs count =  10957 out of  98765)
                   6:  10.16%(abs count =  10036 out of  98765)

fn: gcd(x, 24)
                   1:  28.16%(abs count =  24046 out of  85398)
                   3:  15.64%(abs count =  13358 out of  85398)
                   2:  12.57%(abs count =  10732 out of  85398)
                   6:   8.80%(abs count =   7519 out of  85398)
                   0:   8.80%(abs count =   7511 out of  85398)

fn: while_cycle
                   0:  27.48%(abs count =  23504 out of  85518)
                   2:  16.02%(abs count =  13701 out of  85518)
                   4:  10.97%(abs count =   9379 out of  85518)
                   6:   8.39%(abs count =   7176 out of  85518)
                  -2:   6.33%(abs count =   5412 out of  85518)

fn: lcm(x, 6)
                   6:  15.57%(abs count =  21193 out of 136136)
                  30:   7.52%(abs count =  10237 out of 136136)
                 150:   6.84%(abs count =   9310 out of 136136)
                  42:   4.73%(abs count =   6437 out of 136136)
                 114:   4.61%(abs count =   6271 out of 136136)

fn: if_prime
                  17:  23.76%(abs count =  20336 out of  85573)
                   0:   4.54%(abs count =   3886 out of  85573)
                   1:   3.80%(abs count =   3248 out of  85573)
                   4:   3.65%(abs count =   3127 out of  85573)
                   6:   3.61%(abs count =   3088 out of  85573)

fn: ceil(x / 4) ** 2
                   1:  15.71%(abs count =  17929 out of 114157)
                   4:  12.52%(abs count =  14287 out of 114157)
                   0:  11.38%(abs count =  12986 out of 114157)
                   9:   7.31%(abs count =   8347 out of 114157)
                  16:   6.41%(abs count =   7316 out of 114157)

fn: (x % 5) + 1
                   1:  20.64%(abs count =  17715 out of  85838)
                   4:  17.07%(abs count =  14656 out of  85838)
                   5:  16.44%(abs count =  14112 out of  85838)
                   3:  16.29%(abs count =  13981 out of  85838)
                   2:  14.45%(abs count =  12401 out of  85838)

fn: x // -4
                  -1:  15.00%(abs count =  14623 out of  97487)
                   0:  12.39%(abs count =  12077 out of  97487)
                  -2:  12.20%(abs count =  11891 out of  97487)
                  -3:   7.54%(abs count =   7353 out of  97487)
                  -4:   7.09%(abs count =   6912 out of  97487)

fn: last_negative
                   0:  15.57%(abs count =  13305 out of  85448)
                  -3:  12.30%(abs count =  10514 out of  85448)
                  -2:  11.90%(abs count =  10171 out of  85448)
                  -1:  11.88%(abs count =  10150 out of  85448)
                  -5:  10.16%(abs count =   8678 out of  85448)

fn: 50 // x
                   1:  10.61%(abs count =  11783 out of 111028)
zd                  :   8.74%(abs count =   9708 out of 111028)
                   2:   7.65%(abs count =   8489 out of 111028)
                 -25:   7.57%(abs count =   8400 out of 111028)
                   3:   6.21%(abs count =   6897 out of 111028)

fn: double_r
                  -2:  13.72%(abs count =  11724 out of  85431)
                   2:   9.52%(abs count =   8129 out of  85431)
                   3:   8.60%(abs count =   7349 out of  85431)
                   4:   7.81%(abs count =   6674 out of  85431)
                   5:   5.28%(abs count =   4511 out of  85431)

fn: ceil(x / 3)
                   1:  12.53%(abs count =  10716 out of  85510)
                   0:  11.62%(abs count =   9940 out of  85510)
                   2:  11.48%(abs count =   9819 out of  85510)
                   3:   8.87%(abs count =   7582 out of  85510)
                   5:   6.98%(abs count =   5966 out of  85510)

fn: 1 / x
zd                  :   4.78%(abs count =  10217 out of 213925)
             0.14286:   3.07%(abs count =   6561 out of 213925)
             0.16667:   2.83%(abs count =   6051 out of 213925)
             0.09091:   2.68%(abs count =   5726 out of 213925)
             0.06667:   2.54%(abs count =   5441 out of 213925)

fn: switch_places
                0.15:   5.74%(abs count =   8442 out of 146965)
                 0.1:   5.19%(abs count =   7625 out of 146965)
                0.12:   5.04%(abs count =   7408 out of 146965)
                 0.2:   4.87%(abs count =   7162 out of 146965)
                 0.3:   4.48%(abs count =   6588 out of 146965)

fn: increment_digits
                1.11:   5.97%(abs count =   6677 out of 111904)
               21.11:   3.42%(abs count =   3832 out of 111904)
                1.61:   3.11%(abs count =   3476 out of 111904)
                2.11:   3.01%(abs count =   3365 out of 111904)
                8.11:   3.00%(abs count =   3358 out of 111904)

fn: reverse
                   0:   6.84%(abs count =   6531 out of  95445)
                 -51:   5.70%(abs count =   5441 out of  95445)
                   1:   5.65%(abs count =   5396 out of  95445)
                   4:   4.36%(abs count =   4157 out of  95445)
                   3:   4.26%(abs count =   4064 out of  95445)

fn: x % 25
                   0:   5.51%(abs count =   4737 out of  86027)
                   5:   5.34%(abs count =   4594 out of  86027)
                  15:   4.56%(abs count =   3921 out of  86027)
                   1:   4.53%(abs count =   3899 out of  86027)
                   7:   4.33%(abs count =   3724 out of  86027)

fn: r_subtract
                   0:   5.38%(abs count =   4613 out of  85779)
                   2:   4.53%(abs count =   3886 out of  85779)
                   1:   4.15%(abs count =   3558 out of  85779)
                   4:   3.99%(abs count =   3421 out of  85779)
                  -2:   3.94%(abs count =   3382 out of  85779)

fn: -0.5 * x
                 -21:   3.95%(abs count =   4594 out of 116244)
                   0:   3.33%(abs count =   3868 out of 116244)
                -3.5:   2.89%(abs count =   3354 out of 116244)
                 -25:   2.85%(abs count =   3318 out of 116244)
                -0.5:   2.81%(abs count =   3262 out of 116244)

fn: 10 - x
                 -32:   3.76%(abs count =   4579 out of 121737)
                 -23:   3.56%(abs count =   4334 out of 121737)
                  10:   3.24%(abs count =   3940 out of 121737)
                 -30:   3.20%(abs count =   3891 out of 121737)
                 -40:   2.73%(abs count =   3320 out of 121737)

fn: -2 * x + 40
                 -44:   3.67%(abs count =   4498 out of 122557)
                 -26:   3.54%(abs count =   4342 out of 122557)
                  40:   3.23%(abs count =   3953 out of 122557)
                 -40:   3.04%(abs count =   3729 out of 122557)
                  26:   2.73%(abs count =   3340 out of 122557)

fn: r_multiply
                 -22:   3.22%(abs count =   4430 out of 137444)
                 130:   3.15%(abs count =   4335 out of 137444)
                   0:   2.91%(abs count =   3997 out of 137444)
                 -21:   2.64%(abs count =   3628 out of 137444)
                  26:   2.44%(abs count =   3355 out of 137444)

fn: x + 20.5
                20.5:   4.34%(abs count =   3997 out of  92126)
                21.5:   3.65%(abs count =   3361 out of  92126)
                27.5:   3.62%(abs count =   3338 out of  92126)
                24.5:   3.48%(abs count =   3210 out of  92126)
                26.5:   3.47%(abs count =   3197 out of  92126)

fn: x + 11
                  11:   4.24%(abs count =   3992 out of  94154)
                  18:   3.51%(abs count =   3308 out of  94154)
                  12:   3.51%(abs count =   3308 out of  94154)
                  15:   3.37%(abs count =   3169 out of  94154)
                  17:   3.35%(abs count =   3152 out of  94154)

fn: if_equal_or_not
                 -10:   4.15%(abs count =   3985 out of  96005)
                   3:   3.72%(abs count =   3568 out of  96005)
                  -3:   3.46%(abs count =   3319 out of  96005)
                  -9:   3.41%(abs count =   3275 out of  96005)
                  -6:   3.30%(abs count =   3169 out of  96005)

fn: 40 - x
                  40:   3.96%(abs count =   3960 out of  99902)
                  39:   3.33%(abs count =   3324 out of  99902)
                  33:   3.31%(abs count =   3308 out of  99902)
                  34:   3.19%(abs count =   3191 out of  99902)
                  36:   3.18%(abs count =   3172 out of  99902)

fn: x - 12
                 -12:   3.99%(abs count =   3952 out of  99072)
                 -22:   3.55%(abs count =   3521 out of  99072)
                  -5:   3.32%(abs count =   3293 out of  99072)
                 -11:   3.32%(abs count =   3289 out of  99072)
                  -8:   3.19%(abs count =   3159 out of  99072)

fn: x + 5
                   5:   4.44%(abs count =   3948 out of  88981)
                   6:   3.70%(abs count =   3288 out of  88981)
                  12:   3.68%(abs count =   3273 out of  88981)
                   9:   3.52%(abs count =   3129 out of  88981)
                  11:   3.48%(abs count =   3098 out of  88981)

fn: x - 7
                  -7:   4.26%(abs count =   3926 out of  92152)
                   0:   3.61%(abs count =   3329 out of  92152)
                  -6:   3.56%(abs count =   3280 out of  92152)
                  -3:   3.41%(abs count =   3139 out of  92152)
                  -1:   3.38%(abs count =   3115 out of  92152)

fn: for_cycle
                   0:   4.47%(abs count =   3884 out of  86985)
                  27:   3.83%(abs count =   3332 out of  86985)
                  11:   3.81%(abs count =   3312 out of  86985)
                  44:   3.65%(abs count =   3179 out of  86985)
                  16:   3.63%(abs count =   3154 out of  86985)

fn: x - 1
                  -1:   4.38%(abs count =   3878 out of  88579)
                   6:   3.72%(abs count =   3298 out of  88579)
                   0:   3.68%(abs count =   3260 out of  88579)
                   3:   3.53%(abs count =   3128 out of  88579)
                   5:   3.50%(abs count =   3100 out of  88579)

fn: 2 * x
                   0:   3.44%(abs count =   3872 out of 112412)
                  14:   2.97%(abs count =   3343 out of 112412)
                   2:   2.95%(abs count =   3311 out of 112412)
                  12:   2.78%(abs count =   3124 out of 112412)
                   8:   2.77%(abs count =   3117 out of 112412)

fn: x
                   0:   4.51%(abs count =   3856 out of  85562)
                   7:   3.82%(abs count =   3269 out of  85562)
                   1:   3.79%(abs count =   3243 out of  85562)
                   4:   3.64%(abs count =   3116 out of  85562)
                   6:   3.63%(abs count =   3102 out of  85562)

fn: x / 1.5
                   0:   3.74%(abs count =   3846 out of 102848)
             4.66667:   3.25%(abs count =   3347 out of 102848)
             0.66667:   3.25%(abs count =   3347 out of 102848)
             2.66667:   3.04%(abs count =   3129 out of 102848)
                   4:   3.04%(abs count =   3128 out of 102848)

fns which produced certain result:
color: green-int     ['13', '19', 'x', 'x + 5', 'x + 11', 'x - 1', '2 * x', 'min(x, 11)', 'ceil(x / 3)', 'max(x, 9)', 'gcd(x, 24)', 'if_prime', '(x % 5) + 1', '10 - x', '50 // x', 'x % 25', 'ceil(x / 4) ** 2', 'while_cycle', 'ceil(sqrt(10 + x))', 'floor(log2(68 - x))', 'int_from_list', 'reverse', 'r_subtract', 'r_divide', 'double_r', '7', 'x - 7', 'x - 12', '-2 * x + 40', 'if_equal_or_not', 'for_cycle', 'ints_from_list', 'x / 1.5', '40 - x', 'r_multiply', 'lcm(x, 6)', '1 / x', 'x // -4', '-0.5 * x', 'x + 20.5', '15', 'switch_places']
color: yellow-int+   ['lcm(x, 6)', 'x - 7', '40 - x', '-2 * x + 40', 'if_greater_or_less', 'for_cycle', 'r_multiply', 'x + 11', '2 * x', 'reverse', 'r_divide', 'x + 5', 'ceil(x / 4) ** 2', 'int_from_list', 'ints_from_list', 'last_negative', 'x', 'x - 1', 'max(x, 9)', 'if_prime', 'while_cycle', 'r_subtract', '50 // x', 'x % 25', '10 - x', 'if_equal_or_not', 'x // -4', 'x - 12', 'x / 1.5', 'gcd(x, 24)', 'min(x, 11)', 'ceil(x / 3)', '-0.5 * x', 'switch_places', 'double_r', 'x + 20.5', 'ceil(sqrt(10 + x))', 'floor(log2(68 - x))']
color: yellow-int-   ['x - 12', 'x // -4', 'sin(pi * x / 2) - 2', 'split_by_int', 'last_negative', 'if_equal_or_not', '10 - x', '-0.5 * x', 'x - 7', '-2 * x + 40', 'x', 'x - 1', '2 * x', 'min(x, 11)', 'ceil(x / 3)', 'if_prime', '50 // x', 'for_cycle', 'while_cycle', 'reverse', 'r_subtract', 'double_r', 'r_multiply', 'x / 1.5', '40 - x', 'x + 5', '1 / x', 'x + 11', 'x + 20.5', 'floor(log2(68 - x))']
color: red-int+      ['ints_from_list', 'lcm(x, 6)', 'for_cycle', 'reverse', 'r_multiply', '2 * x', 'ceil(x / 4) ** 2', 'x + 11', '-2 * x + 40', 'x', 'x + 5', 'max(x, 9)', 'if_prime', 'x - 1', 'x - 7', 'while_cycle', 'x - 12', 'if_equal_or_not', '50 // x', 'x / 1.5', '40 - x', 'switch_places', 'x + 20.5', 'ceil(x / 3)', 'x // -4', 'r_divide']
color: red-float+    ['x + 20.5', 'x / 1.5', 'switch_places', 'increment_digits', '1 / x', '-0.5 * x', 'x', 'x + 5', 'x + 11', 'x - 1', 'max(x, 9)', 'gcd(x, 24)', 'if_prime', '(x % 5) + 1', 'x - 7', 'x - 12', '40 - x', 'x % 25', 'if_equal_or_not', 'for_cycle', '10 - x', '2 * x', 'r_subtract', 'min(x, 11)', '-2 * x + 40', 'double_r']
color: red-float-    ['-0.5 * x', 'x / 1.5', '1 / x', 'increment_digits', '10 - x', 'sin(pi * x / 2) - 2', 'r_subtract', 'x', 'x + 5', 'x - 1', 'min(x, 11)', 'if_prime', 'x - 7', 'x - 12', 'if_equal_or_not', '-2 * x + 40', 'for_cycle', 'x + 11', '2 * x', 'double_r', '40 - x', 'x + 20.5']
color: white-float+  ['1 / x', 'switch_places', 'increment_digits', '40 - x', 'x + 20.5', 'x / 1.5', '10 - x', '-2 * x + 40', 'x % 25', 'for_cycle', '-0.5 * x', 'x + 5', 'x + 11', '(x % 5) + 1', 'x - 1', 'x - 12', 'r_subtract', 'if_equal_or_not', '2 * x', 'x - 7']
color: white-inf     ['inf']
color: white-int+    ['lcm(x, 6)', 'ceil(x / 4) ** 2', 'r_multiply', '2 * x', 'for_cycle', 'x + 11', '50 // x', 'x + 5', 'reverse', 'x + 20.5', '-2 * x + 40', 'ceil(x / 3)']
color: red-int-      ['10 - x', '-2 * x + 40', '-0.5 * x', 'x - 12', 'x - 7', 'if_equal_or_not', '50 // x', 'r_multiply', 'x // -4', '2 * x', '40 - x', 'x - 1', 'min(x, 11)', 'if_prime', 'for_cycle', 'r_subtract', 'x + 5', 'while_cycle', 'reverse', 'x', 'x / 1.5', 'ceil(x / 3)', 'x + 20.5']
color: re            ['r_divide']
color: white-int-    ['r_multiply', '10 - x', '-2 * x + 40', '-0.5 * x', '50 // x', '40 - x', 'x - 12', 'x // -4', '2 * x', 'x - 7', 'if_equal_or_not', 'reverse', 'x - 1', 'ceil(x / 3)', 'x + 20.5', 'x / 1.5', 'while_cycle']
color: te            ['int_from_list', 'ints_from_list']
color: white-float-  ['sin(pi * x / 2) - 2', '1 / x', 'increment_digits', '-0.5 * x', 'x - 12', 'if_equal_or_not', 'x + 20.5', 'x / 1.5', 'x - 7', 'r_subtract', 'x - 1', 'x + 11', '-2 * x + 40', '10 - x', 'for_cycle', '40 - x', '2 * x', 'x + 5']
color: zd            ['50 // x', '1 / x']
color: ve            ['floor(log2(68 - x))', 'ceil(sqrt(10 + x))']

most common values globally:
value: inf           5.696211978381096
value: 0             3.2699574220713927
value: 7             2.8449833459024636
value: 6             2.8344370600804423
value: 1             2.8270330568124686
value: 4             2.8139925842131723
value: -2            2.6717453808446456
value: 5             2.6355894922071395
value: 2             2.346833364756159
value: 15            2.2377568815987936
value: -3            2.223518413775767
value: 9             2.1576286764705883
value: 13            2.1453148567119156
value: 3             2.135770173453997
value: -1            2.0744760243841127
value: 19            2.063124528657617
value: te            1.7698710093011563
value: re            1.3181678921568627
value: 11            1.279478538210156
value: 8             1.1706770047762696
value: 30            1.1270778343388637
value: 10            1.0881331699346404
value: 42            1.086169243338361
value: 33            0.8732796003016592
value: 17            0.8607890271493214
value: 12            0.8348848353443942
value: 20            0.83211569884364
value: 28            0.8068596028154853
value: -4            0.8034620098039215
value: -5            0.7892235419808948
value: -6            0.6718985671191554
value: ve            0.6615290346907994
value: 16            0.6249803607340373
value: 18            0.6015703557063852
value: 40            0.5303780165912519
value: -9            0.5266661953242836
value: -7            0.5104638009049773
value: -8            0.4945756347410759
value: 24            0.49445779914529914
value: 14            0.4878393665158371



Process finished with exit code 0

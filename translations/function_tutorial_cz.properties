title_title=Jak používat\nfunkce
title_subtitle=(hodí se)
page1_title=## Jak použít funkci
page1_text=\
# Jsou zde dva způsoby, jak zapsat funkci:\
lambda x: x + 5\
# "lambda x" označuje funkci bez jména\
# s jedním vstupním argumentem x\
\
# "x + 5" je výsledek, vložené číslo\
# je zvýšeno o 5, pro 11 vrací funkce 16\
\
# nebo:\
def zvyš_a_vynásob(x):\
  x += 1\
  return x * 2\
\
# "zvyš_a_vynásob" je jméno funkce,\
# opět má jeden vstupní argument x\
\
# tato funkce nejdříve zvýší vstup o jedna\
# poté vrátí dvojnásobek mezivýsledku,\
# například pro vstup 3 vrací číslo 8\
\
# můžeš zřetězit více funkcí za sebe,\
# pokud zřetězíme 1. a 2. funkci\
# na čísle 1, dostaneme: 1 -> 6 -> 14,\
# ale pokud změníme pořadí použitých\
# funkcí, dostaneme jiný výsledek:\
# 1 -> 4 -> 9
page2_title=## Nápověda pro ① karty
page2_text=\
lambda x: 15\
# konstantní funkce, vrací číslo 15\
# pro jakoukoli vstupní hodnotu\
① 1 -> 15, -2 -> 15\
# 1 -> 15 je příklad, že tato funkce\
# pro vstup 1 vrací hodnotu 15\
\
lambda x: x\
# vstupní hodnota je vrácena beze změny\
① 1 -> 1, 2 -> 2, 12 -> 12\
\
lambda x: x + 5\
① 1 -> 6, 7 -> 12\
\
lambda x: 2 * x\
# "*" znamená násobení\
① 1 -> 2, 3 -> 6\
\
lambda x: max(x, 9)\
# maximum dvou čísel vrací vždy\
# to větší z nich\
① 7 -> 9, 9 -> 9, 14 -> 14\
\
lambda x: min(x, 11)\
# "min" funguje obdobně jako funkce max\
① 1 -> 1, 11 -> 11, 16 -> 11
page3_title=
page3_text=\
lambda x: ceil(x / 3)\
# "/" je symbol pro dělení, x je poděleno\
# jako reálné číslo, "ceil" zaokrouhluje\
# číslo vždy nahoru. Např. 4 / 3 je jedna\
# a kousek, zaokrouhledno nahoru vrací 2\
① 1 -> 1, 2 -> 1, 3 -> 1, 4 -> 2\
\
lambda x: gcd(x, 12)\
# největší společný dělitel čísla x a 12,\
# je to největší ze všech čísel, které\
# dělí jak x tak 12\
① 10 -> 2, 6 -> 6, 16 -> 4\
\
lambda x: lcm(x, 4)\
# nejmenší společný násobek je nejmenší\
# z čísel dělitelných jak čtyřmi, tak x\
① 2 -> 4, 3 -> 12, 6 -> 12\
\
lambda x: (x % 5) + 1\
# "%" značí zbytek po dělení, např. 22\
# děleno 5 jsou 4, zbytek 2, tato funkce\
# by vrátila číslo 3 (2 + 1)\
① 1 -> 2, 7 -> 3, 10 -> 1\
\
def if_prime  # definici najdeš na kartě\
# číslo je prvočíslo, pokud má pouze dva\
# dělitele, číslo 1 a sebe sama\
① 1 -> 1, 2 -> 17, 4 -> 4, 5 -> 17
page4_title=## Řídící znaky if, elif a else
page4_text=\
def if_func(x):\
  if x > 5:   x += 1\
  if x > 3:   x += 2\
  elif x < 1: x += 3\
  else:       x += 4\
  return x + 10\
\
# "x += 1" je provedeno pouze pokud\
# x je větší než 5\
\
# "x += 2" je provedeno pouze pokud\
# x je větší než 3\
\
# elif je zkratka pro "else if", tedy\
# x je zvýšeno o tři pouze pokud x je\
# menší než 1 A ZÁROVEŇ není větší než 3\
\
# "x += 4" je provedeno pouze pokud\
# obě předchozí podmínky nejsou splněny,\
# tedy pokud x je 1, 2 nebo 3\
\
# "return x + 10" není ovlivěn předchozími\
# podmínkami a je proveden vždy\
\
if x > 5:  # dvouřádkový ekvivalent\
  x += 1   # prvního "if"
page5_title=## Nápověda pro ② karty
page5_text=\
# jen připomínka, některé kombinace karet\
# mohou vracet škaredé výsledky, takže\
# pokud něco nemůžeš vypočítat zpaměti\
# pak to nepoužívej, případně použij\
# pouze odhad výsledku (stačí být blíže\
# k výstupní hodnotě než protihráč)\
\
# znaky ①②③ ukazují, které ukázky jsou\
# relevantní pro které obtížnosti, můžeš\
# s klidem ignorovat ukázky pro těžší\
# obtížnost, než jakou zrovna hraješ\
\
lambda x: ceil(x / 3)\
# ceil zaokrouhluje nahoru, ceil -0.8 je 0\
② -3 -> -1, -2 -> 0, 0 -> 0\
\
lambda x: x // -6\
# x // y je ekvivalentní k floor(x / y),\
# floor zaokrouhluje dolů\
# 1 // -2 je floor(-0.5), což je -1\
② 0 -> 0, 1 -> -1, 6 -> -1, 7 -> -2\
③ 6.1 -> -2\
\
def if_prime\
# jen přirozená čísla mohou být prvočíslo\
② 0 -> 0, -5 -> -5\
③ 3.5 -> 3.5, 200 -> 200, 201 -> 0
page6_title=
page6_text=\
lambda x: 100 // x\
# "kolikrát se x vleze do 100"\
② 3 -> 33, -5 -> -20\
③ -3.3 -> -30\
\
lambda x: gcd(x, 12)  # i zelené karty\
② 0 -> 12, -5 -> 1    # mohou být zákeřné\
③ 1.5 -> 1.5, -3.5 -> 0.5, inf -> 12\
\
lambda x: lcm(x, 4)\
② 0 -> 0, -5 -> 20\
③ 1.5 -> 12, 2.5 -> 20, inf -> inf\
\
lambda x: sin(pi * x / 2) - 2\
# sin(0) is 0, sin(pi/2) is 1\
# sin(pi) is 0, sin(3*pi/2) is -1\
② 0 -> -2, 4 -> -2, 5 -> -1, -1 -> -3\
③ 2.2 -> "mezi -2 a -3", inf -> ValueError\
\
lambda x: (x % 5) + 1\
② -2 -> 4, -9 -> 2\
③ 5.5 -> 1.5, -9.5 -> 1.5, inf -> 1\
\
def if_greater_or_less\
# očekuj if, elif, else, dvě strany zpět\
② 0 -> 66, 5 -> 42, 42 -> 42, 99 -> 5\
\
def if_equal_or_not\
② 10 -> 76, 20 -> 10, 66 -> 6
page7_title=## Řídící znaky for a while
page7_text=\
for _ in range(počet):\
  x -= 1  # tyto dva příkazy jsou\
  x *= 2  # provedeny počet-krát\
\
def for_cycle\
② 0 -> 0, 1 -> 11, 9 -> 44, 10 -> 10\
\
while x > 0: x -= 1\
# x -= 1 je provedeno stále dokola,\
# dokud je x větší než nula\
\
def while_cycle\
# "round" zaokrouhluje na nejbližší\
# celé číslo, 0.5 zaokrouhluje nahoru\
② 2 -> 2, 5 -> 2, 3 -> 0, 11 -> 4\
③ 2.2 -> 0, -4.9 -> -2\
\
def split_by_int\
# int(x) se rovná x // 1, int(0.8) je 0\
# "1213".split("1") == ["", "2", "3"]\
# len(list) == počet položek v seznamu\
② 0 -> -3, 2 -> -1, 7 -> -2\
\
def last_digit_negative\
# [-1] bere poslední položku ze seznamu\
② 2 -> -2, 31 -> -1, -23 -> -3
page8_title=## Nápověda pro ③ karty
page8_text=\
# dobrá, následující funkce mohou být\
# lehce zákeřné, takže pokud budeš\
# potřebovat více příkladů nebo budeš\
# chtít vidět celou definici, navštiv:\
# https://repl.it/@OndrejLomic/StackO\
\
# funkce také mohou vyvolat výjimky,\
# například pokud se pokusíš podělit\
# cokoli nulou, tak to vyvolá zvláštní\
# efekt, mrkni na poslední stránku\
# návodu pro programátory\
\
lambda x: 2 * x\
③ 2.2 -> 4.4, 3.5 -> 7, inf -> inf\
\
lambda x: min(x, 11)\
③ inf -> 11\
\
def sign\
# vrací 1 pokud x > 0, -1 pokud x < 0\
# a 0 když x == 0\
③ -0.5 -> -1, 0 -> 0, 57.3 -> 1\
\
def abs\
# vzdálenost od nuly, vždy kladné číslo\
③ -1.5 -> 1.5, 0 -> 0, 0.5 -> 0.5
page9_title=
page9_text=\
def int_from_list\
# "123"[0] == "1", "123"[1] == "2"\
② 0 -> 9, 1 -> 5, 12 -> 7\
③ 3.1 -> TypeError, inf -> TypeError\
\
def ints_from_list\
# "123"[0:1] == "1", "123"[1:3] == "23"\
② 0 -> 1, 1 -> 76, 2 -> 781, 3 -> 4\
③ 1.1 -> TypeError\
\
lambda x: ceil(sqrt(x))\
# sqrt(2) značí odmocninu z dvou\
③ 4 -> 2, 5 -> 3, -10 -> ValueError\
\
lambda x: floor(log2(x))\
# logaritmus o základu dvou\
③ 0 -> ValueError, 1 -> 0, 2 -> 1, 3 -> 2\
\
def switch_places\
# "{0:.2f}".format(x) vždy vrací x\
# zaokrouhleno na dvě desetiná místa\
# (1 / 3 jako "3.33", -2.5 jako "-2.50")\
③ 123.456 -> 45.123, -3 -> -0.3\
\
def increment_digits\
# "abaa".replace("a", "c") == "cbcc"\
# opatrně, cifra 9 je zvýšena dvakrát\
③ 10 -> 21.11, -9.08 -> -1.19
page10_title=
page10_text=\
def reverse\
# "abcd"[::-1] == "dcba"\
③ 123.5 -> 321, -43 -> -34\
\
def rec_subtract\
# pozor, tato funkce volá sebe sama!\
# rec_s(20) --> rec_s(rec_s(-40)) -->\
# rec_s(-40) --> -40\
③ 55 -> -5, -20 -> -20\
③ inf -> RecursionError\
\
def rec_divide\
③ 1 -> 0, 2 -> 0, 3 -> 1, 10 -> 2\
③ -2 -> RecursionError\
\
def double_rec\
③ -10 -> 2, 16 -> -1, 260 -> -4\
③ inf -> RecursionError\
\
def rec_multiply\
③ 1 -> 5, 2 -> 6, -2 -> -10, 1.5 -> 20\
③ inf -> inf\
\
# jen pro zachování příčetnosti, obří\
# čísla jsou interpretována jako inf,\
# OverflowError neexistuje, ale pokud ses\
# dostal až sem, jistě si již poradíš sám\
\
# díky ti hráči, přeji hodně zábavy
page11_title=
page11_text=\
\
Malý slovníček pojmů:\
\
return   vrať         prime    prvočíslo \
and      a            range    rozsah    \
or       nebo         len      délka     \
if       pokud        sqrt     odmocnina \
else     jiank        sign     znaménko  \
while    dokud        input    vstup     \
for      pro          ceil     strop     \
in       v            floor    podlaha   \
except   kromě        round    zaokrouhli\
is None  je nic       shuffle  zamíchat  \
inf      nekonečno    all      všechny   \
\
\
gcd       největší společný dělitel\
lcm       nejmenší společný násobek\
enumerate          očíslovat\
ZeroDivisionError  chyba dělení nulou\
ValueError         chyba hodnoty\
TypeError          chyba typu\
RecursionError     rekurzivní chyba\
Exception          výjimka\
\
\
\
          hra and návrh: Ondřej Lomič\
                kontakt: ondrej@lomic.cz
title_title=Jak hrát\
Stack Overflow
title_subtitle=(návod pro programátory)
page1=\
# NEPANIKAŘ\
\
# čti komentáře (šedý text),\
# všechno bude v pořádku\
def hra():\
  # nejdříve vyber obtížnost\
  vyber_obtížnost()\
  # (najdi kartu s funkcí\
  # "vyber obtížnost", která\
  # ti řekne, jak to máš\
  # udělat)\
\
  # potom připrav hru\
  připrav_hru()\
  # to je potřeba udělat\
  # na začátku každé hry\
\
  # hraj kolo tak dlouho,\
  # dokud někdo nevyhraje\
  while nikdo_nevyhrál():\
    hraj_kolo()
page2=\
def vyber_obtížnost():\
  obtížnost = input("Zadej číslo 1-4, "\
    "1 je nejlehčí obtížnost")\
\
  barvy = ["zelená", "žlutá",\
            "červená"][:obtížnost]\
  # na nejlehčí obtížnost hraješ jen\
  # s zelenými kartami, na obtížnost 2\
  # hraješ se zelenými a žlutými\
  # kartami... tak vyber karty\
  # s odpovídající barvou líce:\
  karty = [\
    karta for karta in všechny_karty()\
      if karta.barva_líce in barvy]\
\
  # hodnoty jsou karty s modrým rubem\
  global balíček_hodnot = [\
    karta for karta in karty\
      if karta.barva_rubu == "modrá"]\
\
  # rub funkcí je oranžový\
  global balíček_funkcí = [\
    karta for karta in karty\
      if karta.barva_rubu == "oranžová"]\
\
  # nebudeš potřebovat zbytek karet\
  # dokud nezačneš hru s jinou\
  # obtížností
page3=\
def připrav_hru():\
  # zvlášť zamíchej oba balíčky karet\
  # připravené ve funkci vyber_obtížnost\
  shuffle(balíček_hodnot)\
  shuffle(balíček_funkcí)\
\
  # vyber jedu výstupní hodnotu z vrchu\
  # balíčeku funkcí, ta zůstvá stejná\
  # po celou hru\
  global výstupní_hodnota = \\\
                     balíček_hodnot.pop()\
  # tato hra je pro dva až čtyři hráče\
  počet_hráčů = input("Zadej počet "\
     "hráčů, dva až čtyři")\
  global hráči = []\
\
  # na začátku každé hry, každý hráč\
  # čtyři funkce z balíčku_funkcí\
  for _ in range(počet_hráčů):\
    hráči.append([balíček_funkcí.pop()\
                      for i in range(4)])\
\
# teď jsi připraven hrát\
# první kolo hry
page4=\
def nikdo_nevyhrál():\
  # pokud nějaký hráč nemá žádné funkce\
  # v ruce, hra končí\
  return all([len(funkce) > 0\
                for funkce in hráči])\
\
\
def hraj_kolo():\
  # vytáhni jednu vstupní hodnotu (jen\
  # pro toto kolo) z vrchu balíčku_funkcí\
  global vstupní_hodnota = \
                     balíček_funkcí.pop()\
  # všichni hráči vyberou z ruky kartu(y)\
  # funkcí, které chtějí zahrát\
  vybrané = vyber_karty()\
\
  # na základě vybraných karet, urči\
  # vypočtenou hodnotu pro každého hráče\
  hodnoty = spočti_výstup(vybrané)\
\
  # na základě vstupní, vstpuní\
  # a vypočtených hodnot, urči\
  # vítěze tohoto kola\
  vítězi = urči_vítěze(hodnoty)\
\
  # všichni hráči dostanou nové funkce,\
  # vítězi dostanou o jednu méně\
  naber_nové_funkce(vybrané, vítězi)
page5=\
def vyber_karty():\
  # každý hráč vybere z ruky\
  # jednu či více karet funkcí\
  vybrané = []\
  for karty in hráči:\
    indexy = input("Zadej indexy "\
              "karet funkcí pro zahrání")\
\
    vybrané.append([karty[i]\
            for i in indexy.split(", ")])\
\
  # až si všichni hráči vyberou karty,\
  # ukážou je i ostatním:\
  for i, karty in enumerate(vybrané):\
    for karta in karty:\
      hráči[i].remove(karta)\
      # ala odstraň kartu z ruky hráče :)\
\
  return vybrané
page6=\
def spočti_výstup(vybrané):\
  # první karta transformuje vstupní\
  # hodnotu na odlišnou, druhá (třetí...)\
  # karta transformuje už transformovanou\
  # hodnotu dále\
  # pro více informací najdi brožudu\
  # "Tutoriál funkcí"\
  # opatrně, na pořadí záleží\
  vrať = [vstupní_hodnota for _ in hráči]\
  for i, karty in enumerate(vybrané):\
    try:\
      for karta_funkce in karty:\
        vrať[i] = karta_funkce(vrať[i])\
\
    # zřídka, na vyšší obtížnost,\
    # může nastat výjimka, například když\
    # zkusíš dělit nulou, což způsobí,\
    # že hráč prohraje aktuální kolo\
    # a také další efekty, popsané\
    # ve funkci zpracuj_výjimku\
    except Exception as e:\
      zpracuj_výjimku(i, e)\
      vrať[i] = inf\
\
  return vrať
page7=\
def urči_vítěze(spočtené_hodnoty):\
  # pro jednotlivé hráče urči vzdálenost\
  # spočtené a výstupní hodnoty\
  rozdíly = [\
    abs(výstupní_hodnota - hodnota)\
      for hodnota in spočtené_hodnoty]\
\
  # všichni hráči nejblíže k výstupní\
  # hodnotě toto kolo vítězí\
  vítězi = [i for i in range(hráči)\
    if rozdíly[i] == min(rozdíly)]\
\
  return vítězi\
\
\
def naber_nové_funkce(vybrané, vítězi):\
  # každý hráč si bere tolik nových\
  # funkcí kolik jich použil, kromě\
  # vítězů, ti si berou o kartu méně\
  for i, karty in hráči:\
    počet = len(vybrané[i])\
    if i in vítězi:\
      počet -= 1\
\
    for _ in range(počet):\
      karty.append(balíček_funkcí.pop())\
\
  # pokud někdy dojdou karty funkcí\
  # použij zamíchané použité funkce
page8=\
# výjimky se nevyskytují na zelené\
# obtížnosti a jen zřídka na žluté\
def zpracuj_výjimku(i, ex):\
  # sqrt(-2) či log2(0) vyvolá ValueError\
  if isinstance(ex, ValueError):\
    # vstupní hodnota je změněna,\
    # před určením vítězů kola\
    vstupní_hodnota = \\\
                  balíček_funkcí.pop()\
  # cokoli poděleno nulou...\
  if isinstance(ex, ZeroDivisionError):\
    # výstupní hodnota je změněna\
    výstupní_hodnota = \\\
                  balíček_funkcí.pop()\
  # TypeError je vyvolán, když se pokusíš\
  # přistoupit na 2.5tý prvek v seznamu\
  if isinstance(ex, TypeError):\
    # hráč, který vyvolá TypeError, získá\
    # jednu kartu funkce navíc\
    hráči[i] += [balíček_funkcí.pop()]\
\
  # RecursionError je vyvolán, když\
  # rekurze nemá žádný konec\
  if isinstance(ex, RecursionError):\
    # všichni hráči dostanou funkci navíc\
    for karty in hráči:\
      karty += [balíček_funkcí.pop()]
